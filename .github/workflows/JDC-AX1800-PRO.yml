name: JDC-AX1800-PRO-IPQ60XX-6.12-WIFI

on:
  workflow_dispatch:
  schedule:
    - cron: 0 19 * * *

env:
  REPO_URL: https://github.com/LiBwrt/openwrt-6.x.git
  REPO_BRANCH: k6.12-nss
  CONFIG_FILE: configs/custom.config
  DIY_SCRIPT: libwrt.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: JDC-AX1800-PRO-IPQ60XX-6.12-WIFI
  TZ: Asia/Ho_Chi_Minh

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    - name: Check Server Performance
      run: |
        echo "‚ö†Ô∏è WARNING"
        echo "The allocated server performance is limited. If you select too many plugins, please pay attention to CPU performance!"
        echo -e "Known CPU models (descending order): 7763, 8370C, 8272CL, 8171M, E5-2673 \n"
        echo "-------------------------- CPU Info --------------------------"
        echo "Number of physical CPUs: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU core info: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------- Memory Info --------------------------"
        echo "Installed memory details:"
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "-------------------------- Disk Info --------------------------"
        echo "Number of disks: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone --depth 1 -b $REPO_BRANCH $REPO_URL openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="Author: %an<br/>Date: %cd<br/>Message: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12)
        echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

    - name: Generate Variables
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}
    
    - name: Install Feeds
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        git clone --depth 1 https://github.com/sbwml/openwrt_pkgs.git package/new/custom
        mv package/new/custom/luci-app-netspeedtest  package/new
        mv package/new/custom/speedtest-cli package/new
        rm -rf package/new/custom
        ./scripts/feeds install -a
  
    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        chmod +x $DIY_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT

    - name: Download DL Packages
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      id: compile
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT

    - name: Upload Bin Directory
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: Organize Files
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        cat sha256sums
        cp $OPENWRT_PATH/.config build.config
        mv -f $OPENWRT_PATH/bin/packages/*/*/*.apk packages
        tar -zcf Packages.tar.gz packages
        rm -rf packages feeds.buildinfo version.buildinfo
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware To Artifact
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware To Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          ### General Info
          **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
          JDCloud AX1800 Pro (RE-SS-01) (WIFI)
          - Compiled by @miyukowo
          ### üìí Firmware Info (WIFI)
          - 6.12 kernel firmware with WIFI + Wired NSS support
          - üíª This is the OpenWrt firmware for platform: ${{ env.FIRMWARE_TAG }}
          - ‚öΩ Firmware source: ${{ env.REPO_URL }}
          - üíù Source branch: ${{ env.REPO_BRANCH }}
          - üåê Default address: 192.168.1.1
          - üîë Default password: password
          ### üßä Firmware Version
          - Kernel version: ${{ env.VERSION_KERNEL }}
          - Last update before build from ‚û¶[Source repo](${{ env.REPO_URL }})
          - ${{ env.VERSION_INFO }}
